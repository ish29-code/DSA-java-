/*
class Node {
    int data;
    Node left, right;
    Node(int x) {
        data = x;
        left = right = null;
    }
}
*/

class Solution {
    public ArrayList<Node> findPreSuc(Node root, int key) {
        // code here
        Node pred=null , succ = null;
        Node curr = root;
        
        while(curr!=null){
            if(curr.data==key){
                if(curr.left!=null){
                    Node temp = curr.left;
                    while(temp.right!=null){
                        temp = temp.right;
                    }
                    pred = temp;
                }
                if(curr.right!=null){
                    Node temp = curr.right;
                    while(temp.left!=null){
                        temp = temp.left;
                    }
                    succ = temp;
                }
                break;
            }
            else if(key<curr.data){
                succ = curr;
                curr = curr.left;
            }
            else{
                pred = curr;
                curr = curr.right;
            }
        }
        ArrayList<Node> res = new ArrayList<>();
        res.add(pred);
        res.add(succ);
        
        return res;
    }
}

or



class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        // code here.
        // update pre[0] with the predecessor of the key
        // update suc[0] with the successor of the key
        pre[0] =null;
        suc[0] =null;
        Node curr = root;
        
        while(curr!=null){
            if(curr.data<key){
                pre[0] = curr;
                curr = curr.right;
            }
            else if(curr.data>key){
                suc[0] = curr;
                curr = curr.left;
            }
            else{
                //predecessor
                if(curr.left!=null){
                    Node temp = curr.left;
                    while(temp.right!=null){
                        temp = temp.right;
                    }
                    pre[0] = temp;
                }
                //sucessor
                if(curr.right!=null){
                    Node temp = curr.right;
                    while(temp.left!=null){
                        temp = temp.left;
                    }
                    suc[0] = temp;
                }
                break;
            }
        }
    }
}
