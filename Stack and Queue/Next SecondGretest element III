Input: nums = [2,4,0,9,6]
Output: [9,6,6,-1,-1]
Explanation:
0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.
1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.
2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.
3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.
4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.
Thus, we return [9,6,6,-1,-1].


class Solution {
    public int[] secondGreaterElement(int[] nums) {
        int n = nums.length;
        int res[] = new int[n];
        Arrays.fill(res, -1);
        Stack<Integer> s2 = new Stack<>(),s1=new Stack<>(),temp = new Stack<>();

        for(int i=0;i<n;i++){
            while(!s2.isEmpty() && nums[s2.peek()]<nums[i]){
                res[s2.pop()] = nums[i];
            }
            while(!s1.isEmpty() && nums[s1.peek()]<nums[i]){
                temp.push(s1.pop());
            }
            while(!temp.isEmpty()){
                s2.push(temp.pop());
            }
            s1.push(i);
        }
        return res;
    }
}
