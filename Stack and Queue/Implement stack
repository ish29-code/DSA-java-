Input:
push1(2)
push1(3)
push2(4)
pop1()
pop2()
pop2()
Output: [3, 4, -1]
Explanation:
push1(2) the stack1 will be {2}
push1(3) the stack1 will be {2,3}
push2(4) the stack2 will be {4}
pop1()   the poped element will be 3 from stack1 and stack1 will be {2}
pop2()   the poped element will be 4 from stack2 and now stack2 is empty
pop2()   the stack2 is now empty hence returned -1.



class twoStacks {
    int arr[];
    private static final int SIZE = 100;
    int t1,t2,size;
    twoStacks() {
        size = SIZE ;
        arr = new int[size];
        t1=-1;
        t2=size;
    }

    // Function to push an integer into the stack1.
    void push1(int x) {
        // code here
        if(t1<t2-1){
            t1++;
            arr[t1] = x;
        }
        else {
            System.out.println("Stack Overflow");
        }
    }

    // Function to push an integer into the stack2.
    void push2(int x) {
        // code here
        if(t1<t2-1){
            t2--;
            arr[t2] = x;
        }
        else {
            System.out.println("Stack Overflow");
        }
    }

    // Function to remove an element from top of the stack1.
    int pop1() {
        // code here
        if(t1>=0){
            int x = arr[t1];
            t1--;
            return x;
        }
        else{
            return -1;
        }
    }

    // Function to remove an element from top of the stack2.
    int pop2() {
        // code here
        if(t2<size){
            int x = arr[t2];
            t2++;
            return x;
        }
        else{
            return -1;
        }
    }
}
