Input: arr[] = [10, 9, 4, 5, 4, 8, 6]
Output: 3
Explanation: The three possible subsequences of length 3 are {10, 9, 8}, {4, 5, 4}, and {4, 5, 6}, where adjacent elements have a absolute difference of 1. No valid subsequence of greater length could be formed.


class Solution {
    public static int maxSumPairWithDifferenceLessThanK(int arr[], int N, int K) {
        // Your code goes here
        Arrays.sort(arr);
        int dp[] = new int[N+1];
        
        dp[0]=0;
        for(int i=1;i<N;i++){
            dp[i] = dp[i-1];
            
            if(arr[i]-arr[i-1]<K){
                int pairsum = (arr[i]+arr[i-1]);
                if(i>=2){
                    dp[i] = Math.max(dp[i],dp[i-2]+pairsum);
                }
                else{
                    dp[i] = Math.max(dp[i],pairsum);
                }
            }
        }
        return dp[N-1];
    }
}
