import java.util.*;

class Solution {
    public int countSubsetsWithGivenDiff(int[] arr, int diff) {
        int total = 0;
        for (int num : arr) total += num;

        // sum(S1) must be an integer
        if ((total + diff) % 2 != 0) return 0;

        int target = (total + diff) / 2;

        return countSubsetsWithSum(arr, target);
    }

    private int countSubsetsWithSum(int[] arr, int sum) {
        int n = arr.length;
        int[][] dp = new int[n + 1][sum + 1];

        // Base case: one subset (empty set) for sum = 0
        for (int i = 0; i <= n; i++) dp[i][0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                if (arr[i - 1] <= j)
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] + dp[i - 1][j];
                else
                    dp[i][j] = dp[i - 1][j];
            }
        }

        return dp[n][sum];
    }
}
