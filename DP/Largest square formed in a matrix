Input: mat = [[0, 1, 1, 0, 1], 
              [1, 1, 0, 1, 0],
              [0, 1, 1, 1, 0],
              [1, 1, 1, 1, 0],
              [1, 1, 1, 1, 1],
              [0, 0, 0, 0, 0]]
Output: 3
Explanation: 

The maximum length of a side of the square sub-matrix is 3 where every element is 1.


class Solution {
    static int maxSquare(int mat[][]) {
        // code here
        int n = mat.length;
        int m = mat[0].length;
        
        int dp[][] = new int[n+1][m+1];
        int maxsize = 0;
        
        
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                
                if(mat[i-1][j-1]==1){
                    dp[i][j] = 1+Math.min(dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]));
                }
                maxsize = Math.max(maxsize,dp[i][j]);
            }
        }
        return maxsize;
        
    }
}

OR---------->MAXIMAL SQUARE

class Solution {
    public int maximalSquare(char[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;

        int dp[][] = new int[n+1][m+1];
        int maxsize = 0;

        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(matrix[i-1][j-1]=='1'){
                    dp[i][j] = 1 + Math.min(dp[i-1][j],Math.min(dp[i][j-1],dp[i-1][j-1]));
                }
                maxsize = Math.max(maxsize,dp[i][j]);
            }
        }
        return maxsize*maxsize;
    }
}
