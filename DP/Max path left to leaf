Input: root = [3, 4, 5, -10, 4, N, N]
                         
Output: 16
Explanation: Maximum Sum lies between special node 4 and 5. 4 + 4 + 3 + 5 = 16.

class Solution {
    int res = Integer.MIN_VALUE;
    
    int maxPathSum(Node root) {
        res = Integer.MIN_VALUE;
        int val = solve(root);
    
        if (root.left == null || root.right == null) {
            return Math.max(res, val);
        }
        
        return res;
    }

    int solve(Node root) {
        if (root == null) return 0;

        int l = solve(root.left);
        int r = solve(root.right);

        if (root.left != null && root.right != null) {
            res = Math.max(res, l + r + root.data);
            return Math.max(l, r) + root.data;
        }

        return (root.left == null ? r : l) + root.data;
    }
}
