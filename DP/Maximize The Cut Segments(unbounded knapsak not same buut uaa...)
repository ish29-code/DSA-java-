Input: n = 4, x = 2, y = 1, z = 1
Output: 4
Explanation: Total length is 4, and the cut lengths are 2, 1 and 1.  We can make maximum 4 segments each of length 1.

class Solution {
    // Function to find the maximum number of cuts.
    public int maximizeCuts(int n, int x, int y, int z) {
        // Your code herey &&
        
        /*int dp[] = new int[n+1];
        
        Arrays.fill(dp, -1);

        dp[0]=0;
        
        for(int i=1;i<=n;i++){
            if(i>=x && dp[i-x]!=-1){
                dp[i] = Math.max(dp[i],dp[i-x]+1);
            }
            if(i>=y && dp[i-y]!=-1){
                dp[i] = Math.max(dp[i],dp[i-y]+1);
            }
            if(i>=z && dp[i-z]!=-1){
                dp[i] = Math.max(dp[i],dp[i-z]+1);
            }
        }
        return dp[n] == -1 ? 0 : dp[n];*/
        
        int dp[] = new int[n+1];
        Arrays.fill(dp,Integer.MIN_VALUE);
        
        dp[0]=0;
        
        int cuts[] = {x,y,z};
        for(int i=1;i<=n;i++){
            for(int cut : cuts){
                if(i>=cut && dp[i-cut]!=Integer.MIN_VALUE){
                    dp[i] = Math.max(dp[i],dp[i-cut]+1);
                }
            }
        }
        return dp[n]<0 ? 0: dp[n];
        
    }
}
