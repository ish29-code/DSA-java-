ANYTIME

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n][2];

        dp[0][0]=0;
        dp[0][1]=-prices[0];

        for(int i=1;i<n;i++){
            dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1]+prices[i]);
            dp[i][1] = Math.max(dp[i-1][1],-prices[i]);
        }
        return dp[n-1][0];
    }
}


IN A SINGLE DAY

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n+1][2];

        for(int i=n-1;i>=0;i--){
            for(int b=0;b<=1;b++){
                if(b==1){//buy
                    dp[i][b] = Math.max(-prices[i]+dp[i+1][0],dp[i+1][1]);
                }
                else{//sell
                    dp[i][b] = Math.max(prices[i]+dp[i+1][1],dp[i+1][0]);
                }
            }
        }
        return dp[0][1];
    }
}


AT MOST TWO TRANSACTIONS

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n+1][3][2];

        for(int i=n-1;i>=0;i--){
            for(int k=1;k<=2;k++){
                for(int b=0;b<=1;b++){
                    if(b==1){//buy
                        dp[i][k][b] = Math.max(-prices[i]+dp[i+1][k][0],dp[i+1][k][1]);
                    }
                    else{//sell
                        dp[i][k][b] = Math.max(prices[i]+dp[i+1][k-1][1],dp[i+1][k][0]);
                    }
                }
            }
        }
        return dp[0][2][1];
    }
}


//AT MOST K TRANSACTIONS

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n+1][k+1][2];

        for(int i=n-1;i>=0;i--){
            for(int j=1;j<=k;j++){
                for(int b=0;b<=1;b++){
                    if(b==1){
                        //can buy
                        dp[i][j][b] = Math.max(-prices[i]+dp[i+1][j][0],dp[i+1][j][1]);
                    }
                    else{
                        //can sell
                        dp[i][j][b] = Math.max(prices[i]+dp[i+1][j-1][1],dp[i+1][j][0]);
                    }
                }
            }
        }
        return dp[0][k][1];
    }
}
