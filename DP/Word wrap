Input: arr[] = [3,2,2,5], k = 6
Output: 10
Explanation: Given a line can have 6 characters,
Line number 1: From word no. 1 to 1
Line number 2: From word no. 2 to 3
Line number 3: From word no. 4 to 4
So total cost = (6-3)2 + (6-2-2-1)2 = 32+12 = 10. As in the first line word length = 3 thus extra spaces = 6 - 3 = 3 and in the second line there are two word of length 2 and there already 1 space between two word thus extra spaces = 6 - 2 -2 -1 = 1. As mentioned in the problem description there will be no extra spaces in the last line. Placing first and second word in first line and third word on second line would take a cost of 02 + 42 = 16 (zero spaces on first line and 6-2 = 4 spaces on second), which isn't the minimum possible cost.

class Solution {
    public int solveWordWrap(int[] arr, int k) {
        // Code here
        int n = arr.length;
        int dp[] = new int[n+1];
        int ans[] = new int[n];
        dp[n] = 0;
        
        for(int i=n-1;i>=0;i--){
            int currlen = -1;
            dp[i]=Integer.MAX_VALUE;
            for(int j=i;j<n;j++){
                currlen += arr[j]+1;//include space
                if(currlen>k){
                    break;
                }
                
                int cost;
                if(j==n-1){
                    cost=0;
                }
                else{
                    cost = (k-currlen)*(k-currlen);
                }
                
                if(dp[i]>cost+dp[j+1]){
                    dp[i]=cost+dp[j+1];
                    ans[i] = j+1;
                }
            }
        }
        return dp[0];
    }
}
