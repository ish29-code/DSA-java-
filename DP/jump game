Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.


GREEDY APPROACH....

/*class Solution {//o(n)
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int maxlen = 0;
        for(int i=0;i<n;i++){
            if(i>maxlen){
                return false;
            }
            maxlen = Math.max(maxlen,i+nums[i]);
        }
        return true;
    }
}*/

class Solution {//o(n2)
    public boolean canJump(int[] nums) {
        int n = nums.length;
        boolean dp[] = new boolean[n];
        dp[0] = true;

        for(int i=0;i<n;i++){
            if(dp[i]){
                int maxjump = Math.min(i+nums[i],n-1);
                for(int j=i+1;j<=maxjump;j++){
                    dp[j]=true;
                }
            }
        }
        return dp[n-1];
    }
}
