Input: arr[] = [12, 34, 67, 90], k = 2
Output: 113
Explanation: Allocation can be done in following ways:
[12] and [34, 67, 90] Maximum Pages = 191
[12, 34] and [67, 90] Maximum Pages = 157
[12, 34, 67] and [90] Maximum Pages = 113.
Therefore, the minimum of these cases is 113, which is selected as the output.

class Solution {
    public static boolean isvalid(int[] arr,int k,int maxAllAwllowedpages){
        int stu=1,pages=0;
        
        for(int i=0;i<arr.length;i++){
            if(arr[i]>maxAllAwllowedpages){
                return false;
            }
            
            if(pages+arr[i]<=maxAllAwllowedpages){
                pages+=arr[i];
            }
            else{
                stu++;
                pages=arr[i];
            }
        }
        return stu>k ? false:true;
    }
    
    public static int findPages(int[] arr, int k) {
        // code here
        if(arr.length<k){
            return -1;
        }
        int sum=0;
        for(int i=0;i<arr.length;i++){
            sum+=arr[i];
        }
        
        int ans=-1;
        int st=0,end=sum;
        while(st<=end){
            int mid = (st+end)/2;
            if(isvalid(arr,k,mid)){
                ans=mid;
                end=mid-1;
            }
            else{
                st=mid+1;
            }
        }
        return ans;
    }
}
