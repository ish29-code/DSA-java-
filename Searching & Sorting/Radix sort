//arr = [170, 45, 75, 90, 802, 24, 2, 66]

class Solution
{
    static int getmax(int arr[], int n){
        int max = arr[0];
        for(int i=0;i<n;i++){
            if(arr[i]>max){
                max=arr[i];
            }
        }
        return max;
    }
    static void radixSort(int arr[], int n) 
    { 
        // code here 
        int max = getmax(arr,n);
        for(int exp=1;max/exp>0;exp*=10){
            countsort(arr,n,exp);
        }
        
    } 
    static void countsort(int arr[],int n,int exp){
        int output[]=new int[n];
        int count[]=new int[10];
        Arrays.fill(count,0);//----->[0,0,0,0,0,0,0,0,0,0]
        
        for(int i=0;i<n;i++){//------>[2, 0, 2, 0, 1, 2, 1, 0, 0, 0]
            count[(arr[i]/exp)%10]++;//count[(170/1)%10]++---->count[0]++ (in 0th place increment by 1)---->[1,0,0,0,0,0,0,0,0,0]
        }
        
        //update count----[2, 2, 4, 4, 5, 7, 8, 8, 8, 8]
        for(int i=1;i<10;i++){
            count[i]+=count[i-1];//---->i = 1: count[1] += count[0] â†’ (count[1] = 0 + 2 = 2 )Updated count array: [2, 2, 2, 0, 1, 2, 1, 0, 0, 0]
        }
        
        for(int i=n-1;i>=0;i--){//output: [170, 90, 802, 2, 24, 45, 75, 66]
            output[count[(arr[i]/exp)%10]-1]=arr[i];//----->output[count[(66/1)%10]-1]--->output[count[6]-1]----->output[7]---->[0,0,0,0,0,0,66]
            count[(arr[i]/exp)%10]--;//and decrement count -----> count: [2, 2, 4, 4, 5, 7, 7, 8, 8, 8]
        }
        
        // Copy the output array to arr[], so that arr[] now contains sorted numbers according to the current digit
        for (int i = 0; i < n; i++) { 
            arr[i] = output[i]; 
            
        }
    }
}

