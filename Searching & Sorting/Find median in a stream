N = 4
X[] = 5,15,1,3
Output:
5
10
5
4
Explanation:Flow in stream : 5, 15, 1, 3 
5 goes to stream --> median 5 (5) 
15 goes to stream --> median 10 (5,15) 
1 goes to stream --> median 5 (5,15,1) 
3 goes to stream --> median 4 (5,15,1 3) 

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0


class MedianFinder {
    private PriorityQueue<Integer> maxheap;
    private PriorityQueue<Integer> minheap;
    public MedianFinder() {
        maxheap = new PriorityQueue<>(Collections.reverseOrder());
        minheap = new PriorityQueue<>();
    }
    
    public void addNum(int num) {
        if(maxheap.isEmpty() || num <= maxheap.peek()){
            maxheap.add(num);
        }
        else{
            minheap.add(num);
        }
        balanceheap();
    }

    public void balanceheap(){
        if(maxheap.size()>minheap.size()+1){
            minheap.add(maxheap.poll());
        }
        else if(minheap.size()>maxheap.size()){
            maxheap.add(minheap.poll());
        }
    }
    
    public double findMedian() {
        if(maxheap.size()==minheap.size()){
            return (maxheap.peek()+minheap.peek())/2.0;
        }
        else{
            return maxheap.peek();
        }
    }
}

DRYRUN
Insert 5:
maxHeap: [5]
minHeap: []
Median: 5.0

Insert 15:
Before balancing:
maxHeap: [5]
minHeap: [15]
No balancing needed.
Median: (5 + 15) / 2.0 = 10.0

Insert 1:
Before balancing:
maxHeap: [5, 1]
minHeap: [15]
No balancing needed.
Median: 5.0

Insert 3:
Before balancing:
maxHeap: [5, 1, 3]
minHeap: [15]
Balance: Move 5 from maxHeap to minHeap.
After balancing:
maxHeap: [3, 1]
minHeap: [5, 15]
Median: (3 + 5) / 2.0 = 4.0

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
