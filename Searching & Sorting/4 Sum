Initialize Variables:
count = 0: This will keep track of the number of valid quadruplets.
n = arr.length: Length of the array.
map = new HashMap<>();: HashMap to store the frequency of sums of pairs of elements.
Outer Loop (i): Traverse through the array with the i-th element being considered as the third element of the quadruplet.
Inner Loop 1 (j): For each element arr[i], iterate through the remaining elements to find possible fourth elements and update the count of valid quadruplets using the HashMap.
Inner Loop 2 (j): For each element arr[i], store the sums of pairs formed with previous elements in the HashMap to be used for future iterations.
Return Count: After all iterations, return the total count of valid quadruplets.

Dry Run Example:
Array: [1, 2, 3, 4, 5, 6] Target: 10

Iteration 1 (i = 0):
Consider arr[0] = 1 as the third element.
Inner Loop 1:
j = 1: temp = arr[0] + arr[1] = 1 + 2 = 3. Check if target - temp = 10 - 3 = 7 is in map. Not found.
j = 2: temp = arr[0] + arr[2] = 1 + 3 = 4. Check if target - temp = 10 - 4 = 6 is in map. Not found.
Continue for j = 3 to 5.
Inner Loop 2:
No previous elements to form pairs, map remains empty.
Iteration 2 (i = 1):
Consider arr[1] = 2 as the third element.
Inner Loop 1:
j = 2: temp = arr[1] + arr[2] = 2 + 3 = 5. Check if target - temp = 10 - 5 = 5 is in map. Not found.
j = 3: temp = arr[1] + arr[3] = 2 + 4 = 6. Check if target - temp = 10 - 6 = 4 is in map. Not found.
Continue for j = 4 to 5.
Inner Loop 2:
j = 0: temp = arr[1] + arr[0] = 2 + 1 = 3. Store in map. map = {3: 1}.




class Solution {

    public int countSum(int arr[], int target) {
        int count = 0;
        int n = arr.length;

        // Store the frequency of sum of first two elements
        HashMap<Integer, Integer> map = new HashMap<>();

        // Traverse from 0 to n-1, where arr[i] is the 3rd element
        for (int i = 0; i < n - 1; i++) {
          
            // All possible 4th elements
            for (int j = i + 1; j < n; j++) {
                int temp = arr[i] + arr[j];
                count += map.getOrDefault(target - temp, 0);
            }

            // Store frequency of all possible sums of first two elements
            for (int j = 0; j < i; j++) {
                int temp = arr[i] + arr[j];
                map.put(temp, map.getOrDefault(temp, 0) + 1);
            }
        }

        return count;
    }
}
