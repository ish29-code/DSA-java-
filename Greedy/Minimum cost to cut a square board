Input:m = 6, n= 4, x[] = {2, 1, 3, 1, 4}, y[] = {4, 1, 2}
Output: 42
Explanation: 

For above board optimal way to cut into square is:
Total minimum cost in above case is 42. It is 
evaluated using following steps.
Initial Value : Total_cost = 0
Total_cost = Total_cost + edge_cost * total_pieces
Cost 4 Horizontal cut:      Cost = 0 + 4*1 = 4
Cost 4 Vertical cut:        Cost = 4 + 4*2 = 12
Cost 3 Vertical cut:        Cost = 12 + 3*2 = 18
Cost 2 Horizontal cut:      Cost = 18 + 2*3 = 24
Cost 2 Vertical cut:        Cost = 24 + 2*3 = 30
Cost 1 Horizontal cut:      Cost = 30 + 1*4 = 34
Cost 1 Vertical cut:        Cost = 34 + 1*4 = 38
Cost 1 Vertical cut:        Cost = 38 + 1*4 = 42


class Solution {
    public static int minimumCostOfBreaking(int[] X, int[] Y,int M,int N) {
        // code here
        Arrays.sort(X);
        Arrays.sort(Y);
        
        int horizontalcut = 1;
        int verticalcut = 1;
        int totalcost =0,i=M-1,j=N-1;
        
        while(i>=0 && j>=0){
            if(X[i]>=Y[j]){
                totalcost+=X[i]*verticalcut;
                horizontalcut++;
                i--;
            }
            else{
                totalcost+=Y[j]*horizontalcut;
                verticalcut++;
                j--;
            }
        }
        while(i>=0){
            totalcost+=X[i]*verticalcut;
            horizontalcut++;
            i--;
        }
        while(j>=0){
            totalcost+=Y[j]*horizontalcut;
            verticalcut++;
            j--;
        }
        return totalcost;
    }
}
        
