Input:  arr[] = {10, 12, 12, 10, 10, 11, 10};
Output: Length of the longest contiguous subarray is 2 



import java.util.PriorityQueue;

public class LargestContiguousSubarray {
    public static int findLargestContiguousSubarray(int[] arr) {
        int maxLength = 1;

        for (int i = 0; i < arr.length - 1; i++) {
            PriorityQueue<Integer> minHeap = new PriorityQueue<>();
            minHeap.add(arr[i]);

            int minVal = arr[i], maxVal = arr[i];

            for (int j = i + 1; j < arr.length; j++) {
                if (minHeap.contains(arr[j])) break; // Avoid duplicates
                minHeap.add(arr[j]);

                minVal = Math.min(minVal, arr[j]);
                maxVal = Math.max(maxVal, arr[j]);

                if (maxVal - minVal == j - i) {
                    maxLength = Math.max(maxLength, j - i + 1);
                }
            }
        }
        return maxLength;
    }

    public static void main(String[] args) {
        int[] arr = {10, 12, 11, 14, 13, 15};
        System.out.println("Length of the largest contiguous subarray: " + findLargestContiguousSubarray(arr));
    }
}
