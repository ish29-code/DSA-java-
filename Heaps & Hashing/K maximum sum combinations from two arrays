Input: N = 4, K = 3, A [ ] = {1, 4, 2, 3}, B [ ] = {2, 5, 1, 6}
Output: {10, 9, 9}
Explanation: 10 -> (A : 4) + (B : 6)
                         9 -> (A : 4) + (B : 5)
                         9 -> (A : 3) + (B : 6)


class Solution {
    static List<Integer> maxCombinations(int N, int K, int A[], int B[]) {
        // code here
        Arrays.sort(A);
        Arrays.sort(B);
        PriorityQueue<Integer> maxheap = new PriorityQueue<>(Collections.reverseOrder());
        Set<String> seenpair = new HashSet<>();
        
        for(int i=N-1;i>=0;i--){
            for(int j=N-1;j>=0;j--){
                int sum = A[i]+B[j];
                String pair = i+"-"+j;
                
                
                if(!seenpair.contains(sum)){
                    maxheap.add(sum);
                    seenpair.add(pair);
                }
            }
        }
        List<Integer> result = new ArrayList<>();
        for(int i=0;i<K && !maxheap.isEmpty();i++){
            result.add(maxheap.remove());
        }
        return result;
    }
}
