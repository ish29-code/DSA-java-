Input: arr[] = [4, 5, 1, 2, 3]
Output: [1, 0, 2, 1, 0]
Explanation: There are no elements greater than 3 at the right of 3. There is one element at right of 2 and greater than 2. There are 2 elements greater than 1 at the right of 1. And so on.


import java.util.*;

class Solution {
    public List<Integer> findSurpasser(int[] arr) {
        int n = arr.length;
        int[] count = new int[n];
        int[] indices = new int[n];

        for (int i = 0; i < n; i++) indices[i] = i;

        mergeSort(arr, indices, count, 0, n - 1);

        List<Integer> result = new ArrayList<>();
        for (int val : count) result.add(val);
        return result;
    }

    private void mergeSort(int[] arr, int[] indices, int[] count, int left, int right) {
        if (left >= right) return;

        int mid = left + (right - left) / 2;
        mergeSort(arr, indices, count, left, mid);
        mergeSort(arr, indices, count, mid + 1, right);
        merge(arr, indices, count, left, mid, right);
    }

    private void merge(int[] arr, int[] indices, int[] count, int left, int mid, int right) {
        int[] tempIndices = new int[right - left + 1];
        int i = left, j = mid + 1, k = 0, surpasserCount = 0;

        while (i <= mid && j <= right) {
            if (arr[indices[i]] < arr[indices[j]]) {
                count[indices[i]] += (right - j + 1);
                tempIndices[k++] = indices[i++];
            } else {
                tempIndices[k++] = indices[j++];
            }
        }

        while (i <= mid) {
            tempIndices[k++] = indices[i++];
        }

        while (j <= right) {
            tempIndices[k++] = indices[j++];
        }

        System.arraycopy(tempIndices, 0, indices, left, tempIndices.length);
    }
} 
