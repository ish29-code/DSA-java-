Input:
k = 4, n = 6
arr[] = {1, 2, 3, 4, 5, 6}
Output:
-1 -1 -1 1 2 3
Explanation:
k = 4
For 1, the 4th largest element doesn't
exist so answer will be -1.
For 2, the 4th largest element doesn't
exist so answer will be -1.
For 3, the 4th largest element doesn't
exist so answer will be -1.
For 4, the 4th largest element is 1.
For 5, the 4th largest element is 2.
for 6, the 4th largest element is 3.


class Solution {
    static int[] kthLargest(int k, int[] arr, int n) {
        // code here
        int result[] = new int[n];
        PriorityQueue<Integer> minheap = new PriorityQueue<>();
        
        for(int i=0;i<n;i++){
            minheap.add(arr[i]);//1,2,3
            
            if(minheap.size()>k){
               minheap.remove();
            }
            result[i]=(minheap.size()<k )? -1 : minheap.peek();
        }
        
        return result;
    }
};
