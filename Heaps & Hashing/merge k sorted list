class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null || lists.length==0){
            return null;
        }

        return mergeKlistmid(lists,0,lists.length-1);
    }
    public ListNode mergeKlistmid(ListNode[] lists,int start,int end){
        if(start == end){
            return lists[start];
        }
        int mid = (start+end)/2;

        ListNode left = mergeKlistmid(lists,start,mid);
        ListNode right = mergeKlistmid(lists,mid+1,end);

        return mergeTwolist(left,right);
    }
    public ListNode mergeTwolist(ListNode l1,ListNode l2){
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }

        ListNode dummy = new ListNode(0);//0
        ListNode curr = dummy;
        while(l1!=null && l2!=null){
            if(l1.val<=l2.val){
                curr.next = l1;
                l1=l1.next;
            }
            else{
                curr.next = l2;
                l2 = l2.next;
            }
            curr = curr.next;
        }

        if(l1!=null){
            curr.next = l1;
        }
        else{
            curr.next = l2;
        }
        return dummy.next;
    }
}
