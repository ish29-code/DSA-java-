Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]


class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int ans[] = new int[k];
        Map<Integer,Integer> map = new HashMap<>();

        for(int i=0;i<nums.length;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        }    
        //min heap
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)-> map.get(a)-map.get(b));
        for(int key : map.keySet()){
            pq.add(key);
            if(pq.size()>k){
                pq.remove();
            }
        }

        for(int i=0;i<k;i++){
            ans[i] = pq.remove();
        }
        return ans;
    }
}



class Solution {
    public ArrayList<Integer> topKFrequent(int[] arr, int k) {
        ArrayList<Integer> result = new ArrayList<>();
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        // Step 1: Count occurrences
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Max Heap (PriorityQueue) sorted by frequency, then by value in descending order
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> {
            if (frequencyMap.get(b).equals(frequencyMap.get(a))) {
                return b - a; // If frequencies are equal, prioritize the larger number
            }
            return frequencyMap.get(b) - frequencyMap.get(a); // Otherwise, prioritize based on frequency
        });

        maxHeap.addAll(frequencyMap.keySet());

        // Step 3: Extract top K frequent elements
        for (int i = 0; i < k; i++) {
            result.add(maxHeap.poll());
        }

        return result;
    }
}
