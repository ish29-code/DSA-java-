Input: M[][] = {{‘1’, ‘1’, ‘0’, ‘0’, ‘0’},
                         {‘0’, ‘1’, ‘0’, ‘0’, ‘1’},
                         {‘1’, ‘0’, ‘0’, ‘1’, ‘1’},
                        {‘0’, ‘0’, ‘0’, ‘0’, ‘0’},
                       {‘1’, ‘0’, ‘1’, ‘1’, ‘0’}}
Output: 4
Explanation: The image below shows all the 4 islands in the graph

class Solution {//8 directional
    public int numIslands(char[][] grid) {
        // Code here
        if(grid==null || grid.length==0){
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int numiceland = 0;
        
        for(int row=0;row<m;row++){
            for(int col=0;col<n;col++){
                if(grid[row][col]=='1'){
                    numiceland++;
                    dfs(grid,row,col);
                }
            }
        }
        return numiceland;
    }
    private void dfs(char grid[][],int row,int col){
        if(row<0 || row>=grid.length || col<0 ||col>=grid[0].length || grid[row][col]=='0'){
            return; 
        }
        
        grid[row][col] = '0';
        
        int rDir[] = {1,-1,0,0,1,-1,-1,1};
        int cDir[] = {0,0,1,-1,1,-1,1,-1};
        
        for(int i=0;i<8;i++){
            int Nrow = row+rDir[i];
            int Ncol = col+cDir[i];
            dfs(grid,Nrow,Ncol);
        }
    }
}
