Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]


WITH REVERSE
/*class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverseList(l1);
        l2 = reverseList(l2);
        
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;
        int carry = 0;
        
        while (l1 != null || l2 != null || carry != 0) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }
        
        return reverseList(dummyHead.next);
    }

    private ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;
        
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}*/


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Store the values from the lists in arraylists
        ArrayList<Integer> one = new ArrayList<>();
        ArrayList<Integer> two = new ArrayList<>();
        
        ListNode temp1 = l1;
        while(temp1 != null) {
            one.add(temp1.val);
            temp1 = temp1.next;
        }
        
        ListNode temp2 = l2;
        while(temp2 != null) {
            two.add(temp2.val);
            temp2 = temp2.next;
        }
        
        // Reverse the values to facilitate addition
        Collections.reverse(one);
        Collections.reverse(two);
        
        int carry = 0;
        ArrayList<Integer> result = new ArrayList<>();
        int maxsize = Math.max(one.size(), two.size());
        
        for(int i = 0; i < maxsize; i++) {
            int sum = carry;
            
            if(i < one.size()) {
                sum += one.get(i);
            }
            if(i < two.size()) {
                sum += two.get(i);
            }
            result.add(sum % 10);
            carry = sum / 10;
        }
        
        if(carry != 0) {
            result.add(carry);
        }
        
        // Reverse the result to get the final order
        Collections.reverse(result);
        
        // Create the resulting linked list
        ListNode dummyhead = new ListNode(0);
        ListNode curr = dummyhead;
        
        for(int value : result) {
            curr.next = new ListNode(value);
            curr = curr.next;
        }
        
        return dummyhead.next;
    }
}
