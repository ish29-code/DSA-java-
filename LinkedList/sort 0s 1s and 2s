Input: LinkedList: 1->2->2->1->2->0->2->2
Output: 0->1->1->2->2->2->2->2
Explanation: All the 0s are segregated to the left end of the linked list, 2s to the right end of the list, and 1s in between.


class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        // add your code here
        int zerocount = 0;
        int onecount = 0;
        int twocount = 0;
        
        Node curr = head;
        
        while(curr != null){
            if(curr.data == 0){
                zerocount++;
            }
            else if(curr.data == 1){
                onecount++;
            }
            else if(curr.data == 2){
                twocount++;
            }
            curr = curr.next;
        }
        
        curr = head;
        
        while(curr!=null){
            if(zerocount != 0){
                curr.data = 0;
                zerocount--;
            }
            else if(onecount != 0){
                curr.data = 1;
                onecount--;
            }
            else if(twocount != 0){
                curr.data = 2;
                twocount--;
            }
            curr = curr.next;
        }
        return head;
        
        
    }
}
