1 0 0 0
1 1 0 1
0 1 0 0
1 1 1 1

DDRDRR
DRDDRR




import java.util.*;

public class RatMaze {

    // Utility function to check if x, y is valid index for N*N maze
    private static boolean isSafe(int[][] maze, int x, int y, boolean[][] visited) {
        int N = maze.length;
        return (x >= 0 && x < N && y >= 0 && y < N && maze[x][y] == 1 && !visited[x][y]);
    }

    // A utility function to find all paths in the Maze problem
    private static void findPaths(int[][] maze, int x, int y, boolean[][] visited, ArrayList<String> ans, String path) {
        int N = maze.length;
        
        // If x, y is goal
        if (x == N - 1 && y == N - 1) {
            ans.add(path);
            return;
        }

        // Check if maze[x][y] is valid
        if (isSafe(maze, x, y, visited)) {
            // Mark x, y as visited
            visited[x][y] = true;

            // Move down
            findPaths(maze, x + 1, y, visited, ans, path + 'D');
            // Move up
            findPaths(maze, x - 1, y, visited, ans, path + 'U');
            // Move right
            findPaths(maze, x, y + 1, visited, ans, path + 'R');
            // Move left
            findPaths(maze, x, y - 1, visited, ans, path + 'L');
            
            // Backtrack
            visited[x][y] = false;
        }
    }

    // This function solves the Maze problem and returns all possible paths
    public static ArrayList<String> findAllPaths(int[][] maze) {
        ArrayList<String> ans = new ArrayList<>();
        int N = maze.length;
        boolean[][] visited = new boolean[N][N];

        if (maze[0][0] == 1) {
            findPaths(maze, 0, 0, visited, ans, "");
        }
        
        Collections.sort(ans);  // To return paths in lexicographical order
        return ans;
    }

    public static void main(String[] args) {
        int[][] maze = {
            {1, 0, 0, 0},
            {1, 1, 0, 1},
            {0, 1, 0, 0},
            {1, 1, 1, 1}
        };

        ArrayList<String> result = findAllPaths(maze);
        if (result.isEmpty()) {
            System.out.println("No path found.");
        } else {
            for (String path : result) {
                System.out.println(path);
            }
        }
    }
}
