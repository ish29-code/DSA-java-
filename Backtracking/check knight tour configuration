Input: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]
Output: true
Explanation: The above diagram represents the grid. It can be shown that it is a valid configuration.




class Solution {
    public boolean helper(int grid[][],int row,int col,int num){
        int n = grid.length;
        int i,j;

        if(grid[row][col]==n*n-1){
            return true;
        }
        
        //up-2,right-1
        i = row-2;
        j = col+1;
        if(i>=0 && j<n && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }

        //up-2,left-1
        i = row-2;
        j = col-1;
        if(i>=0 && j>=0 && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }

        //down-2,right-1
        i = row+2;
        j = col+1;
        if(i<n && j<n && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }

        //down-2,left-1
        i = row+2;
        j = col-1;
        if(i<n && j>=0 && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }

        //left-2,up-1
        i = row-1;
        j = col-2;
        if(i>=0 && j>=0 && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }

        //left-2,down-1
        i = row+1;
        j = col-2;
        if(i<n && j>=0 && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }

        //right-2,up-1
        i = row-1;
        j = col+2;
        if(i>=0 && j<n && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }

        //right-2,down-1
        i = row+1;
        j = col+2;
        if(i<n && j<n && grid[i][j]==num+1){
            return helper(grid,i,j,num+1);
        }
        return false;
    }
    public boolean checkValidGrid(int[][] grid) {
        if(grid[0][0]!=0){
            return false;
        }
        return helper(grid,0,0,0);
    }
}
