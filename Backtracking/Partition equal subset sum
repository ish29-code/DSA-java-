class Solution {
    static boolean equalPartition(int arr[]) {
        int n = arr.length;
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        if (sum % 2 != 0) {
            return false; // if the sum is odd, it's not possible to partition it into two equal subsets
        }

        boolean[][] memo = new boolean[n + 1][sum / 2 + 1];
        boolean[][] visited = new boolean[n + 1][sum / 2 + 1];

        return canPartition(arr, n, sum / 2, memo, visited);
    }

    static boolean canPartition(int arr[], int n, int sum, boolean[][] memo, boolean[][] visited) {
        if (sum == 0) {
            return true;
        }
        if (n == 0) {
            return false; 
        }

        if (visited[n][sum]) {
            return memo[n][sum]; 
        }

        if (arr[n - 1] > sum) {
            boolean result = canPartition(arr, n - 1, sum, memo, visited); // if the element is greater than the sum, skip it
            memo[n][sum] = result;
            visited[n][sum] = true;
            return result;
        }

        boolean result = canPartition(arr, n - 1, sum, memo, visited) || canPartition(arr, n - 1, sum - arr[n - 1], memo, visited);
        memo[n][sum] = result;
        visited[n][sum] = true;
        return result;
    }
}
