class Solution {
    public List<String> findPermutation(String s) {
        List<String> result = new ArrayList<>();
        boolean[] used = new boolean[s.length()];
        char[] chars = s.toCharArray();
        Arrays.sort(chars); // Sort characters to handle duplicates
        backtrack(chars, new StringBuilder(), result, used);
        return result;
    }

    private void backtrack(char[] chars, StringBuilder sb, List<String> result, boolean[] used) {
        if (sb.length() == chars.length) {
            result.add(sb.toString());
            return;
        }
        for (int i = 0; i < chars.length; i++) {
            if (used[i] || (i > 0 && chars[i] == chars[i - 1] && !used[i - 1])) {
                continue;
            }
            used[i] = true;
            sb.append(chars[i]);
            backtrack(chars, sb, result, used);
            used[i] = false;
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}

PERMUTATION FOR UNIQUE WITH INT

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        boolean used[] = new boolean[nums.length];
        Arrays.sort(nums);
        backtrack(nums,new ArrayList<>(),result,used);
        return result;
    }
    public void backtrack(int nums[],List<Integer>templist,List<List<Integer>>result,boolean used[]){
        if(templist.size()==nums.length){
            result.add(new ArrayList<>(templist));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(used[i] || i>0 && nums[i]==nums[i-1] && !used[i-1]){
                continue;
            }
            used[i]=true;
            templist.add(nums[i]);
            backtrack(nums,templist,result,used);
            templist.remove(templist.size()-1);
            used[i]=false;
        }
    }
}
