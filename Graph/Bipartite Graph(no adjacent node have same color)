Input: V = 3, edges[][] = [[0, 1], [1,2]]
Bipartite-Graph
Output: true
Explanation: The given graph can be colored in two colors so, it is a bipartite graph.

class Solution {
    public boolean isBipartite(int V, int[][] edges) {
        // Code here
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int edge[] : edges){
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        
        int colors[] = new int[V];
        Arrays.fill(colors,-1);//[-1,-1,-1]
        
        for(int i=0;i<V;i++){
            if(colors[i]==-1){
                Queue<Integer> q = new LinkedList<>();
                q.add(i);
                colors[i] = 0;
                
                while(!q.isEmpty()){
                    int curr = q.remove();
                    
                    for(int neighbour : adj.get(curr)){
                        if(colors[neighbour] == -1){
                            colors[neighbour] = 1-colors[curr];
                            q.add(neighbour);
                        }
                        else if(colors[neighbour] == colors[curr]){
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
}
