Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1
Output: 700
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.




class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        List<List<int[]>> adj = new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int edge[] : flights){
            adj.get(edge[0]).add(new int[]{edge[1],edge[2]});
        }

        int dist[][] = new int[n][k+2];
        for(int row[] : dist){
            Arrays.fill(row,Integer.MAX_VALUE);
        }
        dist[src][0] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a->a[0]));
        pq.add(new int[]{0,src,0});//price,source,stops

        while(!pq.isEmpty()){
            int node[] = pq.remove();
            int cost = node[0],u=node[1],stops=node[2];

            if(u==dst){
                return cost;
            }
            if(stops<=k){
                for(int neighbour[] : adj.get(u)){
                    int v=neighbour[0],price=neighbour[1];
                    if(cost+price < dist[v][stops+1]){
                        dist[v][stops+1] = cost+price;
                        pq.add(new int[]{cost+price,v,stops+1});
                    }
                }
            }
        }
        return -1;
    }
}

or


class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        int []dis=new int [n];
            Arrays.fill(dis,Integer.MAX_VALUE);
            dis[src]=0;

            for(int i =0;i<=k;i++){
                int[] temp = dis.clone();
                for(int []f:flights){
                    int u=f[0];
                    int v=f[1];
                    int d=f[2];
                    if(dis[u]!=Integer.MAX_VALUE){
                        temp[v]=Math.min(temp[v],dis[u]+d);
                    }
                }
                dis=temp;
            }
            return dis[dst] == Integer.MAX_VALUE ? -1 : dis[dst];
    }
}

