Input:
N=10
M=13
edges[]={{1,3},{1,4},{1,5},{2,3},{2,8},{2,9},{3,6},{4,6},{4,8},{5,8},{6,7},{7,8},{8,10}}
Output:
time[]={1,1,2,2,2,3,4,5,2,6 }
Explanation:
Start jobs 1 and 2 at the beginning and complete them at 1 unit of time. 
Since, all the jobs on which need to be completed before the jobs 3, 4, 5, and 9 are completed. So, we can start these jobs at 1st unit of time and complete these at 2nd unit of time after the completion of the dependent Job.
Similarly, 
Job 6 can only be done after the 3rd and 4th jobs are done. So, start it at the 2nd unit of time and complete it at the 3rd unit of time.
Job 7 can only be done after job 6 is done. So, you can start it at the 3rd unit of time and complete it at the 4th unit of time.
Job 8 can only be done after the 4th, 5th, and 7th jobs are done. So, start it at the 4th unit of time and complete it at the 5th unit of time.
Job 10 can only be done after the 8th job is done. So, start it at the 5th unit of time and complete it at the 6th unit of time.


class Solution {
    public static int[] minimumTime(int n, int m, int[][] edges) {
        // code here
        List<List<Integer>> adj = new ArrayList<>();
        int indegree[] = new int[n+1];
        int time[] = new int[n+1];
        
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int edge[] : edges){
            adj.get(edge[0]).add(edge[1]);
            indegree[edge[1]]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        for(int i=1;i<=n;i++){
            if(indegree[i]==0){
                q.add(i);
                time[i] = 1;//if indegree is 0 then time i = 1
            }
        }
        
        while(!q.isEmpty()){
            int curr = q.remove();
            
            for(int neighbour : adj.get(curr)){
                indegree[neighbour]--;
                time[neighbour] = Math.max(time[neighbour],time[curr]+1);
                if(indegree[neighbour]==0){
                    q.add(neighbour);
                }
            }
        }
        int result[] = new int[n];
        for(int i=0;i<n;i++){
            result[i] = time[i+1];
        }
        return result;
    }
}
