Input: adj[][] = [[2, 3, 1], [0], [0, 4], [0], [2]]

Output: [0, 2, 4, 3, 1]
Explanation: Starting from 0, the DFS traversal proceeds as follows:
Visit 0 → Output: 0 
Visit 2 (the first neighbor of 0) → Output: 0, 2 
Visit 4 (the first neighbor of 2) → Output: 0, 2, 4 
Backtrack to 2, then backtrack to 0, and visit 3 → Output: 0, 2, 4, 3 
Finally, backtrack to 0 and visit 1 → Final Output: 0, 2, 4, 3, 1


class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public void dfsofGraph(int node,ArrayList<ArrayList<Integer>> adj,boolean visited[],ArrayList<Integer> result){
        visited[node] = true;
        result.add(node);
        
        for(int neighbour : adj.get(node)){
            if(!visited[neighbour]){
                dfsofGraph(neighbour,adj,visited,result);
            }
        }
    }
    
    public ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> result =  new ArrayList<>();
        int v = adj.size();
        boolean visited[] = new boolean[v];
        
        dfsofGraph(0,adj,visited,result);
        return result;
    }
}
