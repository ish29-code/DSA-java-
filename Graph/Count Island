Input: grid[][] = [['L', 'L', 'W', 'W', 'W'], ['W', 'L', 'W', 'W', 'L'], ['L', 'W', 'W', 'L', 'L'], ['W', 'W', 'W', 'W', 'W'], ['L', 'W', 'L', 'L', 'W']]
Output: 4
Explanation:
The image below shows all the 4 islands in the grid.
 

class Solution {
    public int countIslands(char[][] grid) {
        // Code here
        int r = grid.length;
        int c = grid[0].length;
        
        boolean visited[][] = new boolean[r][c];
        int count = 0;
        
        
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]=='L' && !visited[i][j]){
                    bfs(grid,visited,i,j);
                    count++;
                }
            }
        }
        return count;
        
    }
    public void bfs(char grid[][],boolean visited[][],int row,int col){
        int rows = grid.length;
        int cols = grid[0].length;
        
        int rdir[] ={0,0,-1,1,-1,1,-1,1};
        int cdir[] ={1,-1,0,0,1,-1,1,-1};
        
        
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{row,col});
        visited[row][col] = true;
        
        while(!q.isEmpty()){
            int node[] = q.remove();
            int r = node[0],c = node[1];
            
            for(int i=0;i<8;i++){
                int nr = r+rdir[i];
                int nc = c+cdir[i];
                
                if(nr>=0 && nr<rows && nc>=0 && nc<cols && grid[nr][nc]=='L' && !visited[nr][nc]){
                    visited[nr][nc] = true;
                    q.add(new int[]{nr,nc});
                }
            }
        }
    }
}
