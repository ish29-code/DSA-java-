Input: n = 7, edges = [[0,1],[1,2],[2,0],[3,4],[4,5],[5,6],[6,3]]
Output: 3
Explanation: The cycle with the smallest length is : 0 -> 1 -> 2 -> 0 

class Solution {
    public int findShortestCycle(int n, int[][] edges) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]); // Add both directions for an undirected graph
        }

        return bfs(graph, n);
    }

    private int bfs(Map<Integer, List<Integer>> graph, int n) {
        int shortestCycle = Integer.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            int[] dist = new int[n]; 
            Arrays.fill(dist, -1);
            Queue<int[]> queue = new LinkedList<>();
            
            queue.offer(new int[]{i, -1}); // Start from node `i` with no parent
            dist[i] = 0;

            while (!queue.isEmpty()) {
                int[] nodeInfo = queue.poll();
                int node = nodeInfo[0], parent = nodeInfo[1];

                for (int neighbor : graph.get(node)) {
                    if (dist[neighbor] == -1) { // Unvisited
                        dist[neighbor] = dist[node] + 1;
                        queue.offer(new int[]{neighbor, node});
                    } else if (neighbor != parent) { // Cycle detected
                        shortestCycle = Math.min(shortestCycle, dist[node] + dist[neighbor] + 1);
                    }
                }
            }
        }

        return shortestCycle == Integer.MAX_VALUE ? -1 : shortestCycle;
    }
}
