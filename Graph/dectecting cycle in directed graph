Input: V = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 0], [2, 3]]

Output: true
Explanation: The diagram clearly shows a cycle 0 → 2 → 0


class Solution {
    public boolean isCyclic(int V, int[][] edges) {
        // code here
        int indegree[] = new int[V];
        Map<Integer,Set<Integer>> graph = new HashMap<>();
        for(int edge[] : edges){
            graph.putIfAbsent(edge[0],new HashSet<>());
            graph.get(edge[0]).add(edge[1]);//for directed only
            indegree[edge[1]]++;
        }
        
        
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int count = 0;
        while(!q.isEmpty()){
            int node = q.remove();
            count ++;
            
            for(int neighbour : graph.getOrDefault(node,new HashSet<>())){
                indegree[neighbour]--;
                if(indegree[neighbour]==0){
                    q.add(neighbour);
                }
            }
        }
        return count != V;
        
    }
}
