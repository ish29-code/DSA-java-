Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.


class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n = heights.length,m = heights[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a->a[2]));
        int dist[][] = new int[n][m];

        for(int row[] : dist){
            Arrays.fill(row,Integer.MAX_VALUE);
        }

        dist[0][0] = 0;
        int directions[][] = {{1,0},{-1,0},{0,1},{0,-1}};
        pq.add(new int[]{0,0,0});//roe,col,effort

        while(!pq.isEmpty()){
            int node[] = pq.remove();
            int x = node[0],y=node[1],curreffort=node[2];

            if(x==n-1 && y==m-1){
                return curreffort;
            }

            for(int dir[] : directions){
                int nx = x+dir[0];
                int ny = y+dir[1];

                if(nx>=0 && nx<n && ny>=0 && ny<m){
                    int neweffort = Math.max(curreffort,Math.abs(heights[x][y] - heights[nx][ny]));
                    if(neweffort < dist[nx][ny]){
                        dist[nx][ny] = neweffort;//min
                        pq.add(new int[]{nx,ny,neweffort});
                    }
                }
            }
        }
        return 0;
    }
}
