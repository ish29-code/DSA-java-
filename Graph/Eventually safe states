Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.


class Solution {
    public List<List<Integer>> reverseadj(List<List<Integer>> adj,int V){
        List<List<Integer>> revadj = new ArrayList<>();
        for(int i=0;i<V;i++){
            revadj.add(new ArrayList<>());
        }
        for(int i=0;i<V;i++){
            for(int neighbour : adj.get(i)){
                revadj.get(neighbour).add(i);
            }
        }
        return revadj;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int V = graph.length;
        List<Integer> safestates = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();
    
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
            for(int neighbour : graph[i]){
                adj.get(i).add(neighbour);
            }
        }
        List<List<Integer>> revadj = reverseadj(adj,V);
        int outdegree[] = new int[V];
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<V;i++){
            outdegree[i] = graph[i].length;
            if(outdegree[i]==0){
                q.add(i);
            }
        }

        while(!q.isEmpty()){
            int node = q.remove();
            safestates.add(node);

            for(int neighbour : revadj.get(node)){
                outdegree[neighbour]--;
                if(outdegree[neighbour]==0){
                    q.add(neighbour);
                }
            }
        }
        Collections.sort(safestates);
        return safestates;
    }
}
