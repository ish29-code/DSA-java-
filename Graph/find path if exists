Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2


class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer,List<Integer>> graph = new HashMap<>();
        for(int edge[] :edges){
            graph.putIfAbsent(edge[0],new ArrayList<>());
            graph.putIfAbsent(edge[1],new ArrayList<>());
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        boolean visited[] = new boolean[n];
        return dfs(graph,visited,source,destination);

    }
    public boolean dfs(Map<Integer,List<Integer>> graph,boolean visited[],int node,int destination){
        if(node == destination){
            return true;
        }
        visited[node] = true;

        for(int neighbour : graph.getOrDefault(node,new ArrayList<>())){
            if(!visited[neighbour] && dfs(graph,visited,neighbour,destination)){
                return true;
            }
        }
        return false;
    }
