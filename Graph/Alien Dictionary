Input: words[] = ["baa", "abcd", "abca", "cab", "cad"]
Output: true
Explanation: A possible corrct order of letters in the alien dictionary is "bdac".
The pair "baa" and "abcd" suggests 'b' appears before 'a' in the alien dictionary.
The pair "abcd" and "abca" suggests 'd' appears before 'a' in the alien dictionary.
The pair "abca" and "cab" suggests 'a' appears before 'c' in the alien dictionary.
The pair "cab" and "cad" suggests 'b' appears before 'd' in the alien dictionary.
So, 'b' → 'd' → 'a' → 'c' is a valid ordering.


class Solution{
    public String findOrder(String[] words) {
        int N = 26; // English alphabet size
        List<Integer>[] graph = new ArrayList[N];  
        int[] inDegree = new int[N];  
        Arrays.fill(inDegree, -1); // -1 means the letter is not in input

        // Step 1: Initialize Graph
        for (String word : words) {
            for (char c : word.toCharArray()) {
                if (graph[c - 'a'] == null) {
                    graph[c - 'a'] = new ArrayList<>();
                }
                inDegree[c - 'a'] = 0; // Mark letter as used
            }
        }

        // Step 2: Establish Order Based on Comparisons
        for (int i = 0; i < words.length - 1; i++) {
            String first = words[i], second = words[i + 1];
            int minLength = Math.min(first.length(), second.length());
            boolean foundOrder = false;

            for (int j = 0; j < minLength; j++) {
                char from = first.charAt(j), to = second.charAt(j);
                if (from != to) {
                    if (!graph[from - 'a'].contains(to - 'a')) {
                        graph[from - 'a'].add(to - 'a');
                        inDegree[to - 'a']++;
                    }
                    foundOrder = true;
                    break;
                }
            }

            // If the second word is a prefix of the first, return ""
            if (!foundOrder && second.length() < first.length()) {
                return "";
            }
        }

        // Step 3: Topological Sorting (Efficient Queue Processing)
        Queue<Integer> queue = new LinkedList<>();
        StringBuilder result = new StringBuilder();

        // Add letters with 0 in-degree
        for (int i = 0; i < N; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }

        while (!queue.isEmpty()) {
            int current = queue.poll();
            result.append((char) (current + 'a'));

            for (int neighbor : graph[current]) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
        }

        return result.length() == Arrays.stream(inDegree).filter(v -> v >= 0).count() ? result.toString() : "";
    }
}
