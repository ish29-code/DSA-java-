Input: colors = "abaca", edges = [[0,1],[0,2],[2,3],[3,4]]
Output: 3
Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored "a" (red in the above image).

class Solution {
    public int largestPathValue(String colors, int[][] edges) {
        int n = colors.length(),ans=0;
        int count[][] = new int[n][26];
        List<List<Integer>> graph = new ArrayList<>();
        int indegree[] = new int[n];

        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int edge[] : edges){
            graph.get(edge[0]).add(edge[1]);
            indegree[edge[1]]++;
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int proceding = 0;
        while(!q.isEmpty()){
            int node = q.remove();

            proceding+=1;
            count[node][colors.charAt(node)-'a']++;

            ans = Math.max(ans,count[node][colors.charAt(node)-'a']);

            for(int neighbour : graph.get(node)){
                indegree[neighbour]--;
                if(indegree[neighbour]==0){
                    q.add(neighbour);
                }

                for(int j=0;j<26;j++){
                    count[neighbour][j] = Math.max(count[neighbour][j],count[node][j]);
                }
            }
        }
        return proceding==n ? ans : -1;
    }
}
