Input: x = 3, y = 5, target = 4

Output: true

Explanation:

Follow these steps to reach a total of 4 liters:

Fill the 5-liter jug (0, 5).
Pour from the 5-liter jug into the 3-liter jug, leaving 2 liters (3, 2).
Empty the 3-liter jug (0, 2).
Transfer the 2 liters from the 5-liter jug to the 3-liter jug (2, 0).
Fill the 5-liter jug again (2, 5).
Pour from the 5-liter jug into the 3-liter jug until the 3-liter jug is full. This leaves 4 liters in the 5-liter jug (3, 4).
Empty the 3-liter jug. Now, you have exactly 4 liters in the 5-liter jug (0, 4).
Reference: The Die Hard example.


class Solution {
    public boolean canMeasureWater(int x, int y, int target) {
        if(x+y<target){
            return false;
        }
        int directions[] = {x,-x,y,-y};
        Queue<Integer> q = new ArrayDeque<>();
        Set<Integer> visited = new HashSet<>();
        q.add(0);
        visited.add(0);

        while(!q.isEmpty()){
            int curr = q.remove();
            if(curr==target){
                return true;
            }

            for(int dir : directions){
                int total = curr+dir;

                if(total==target){
                    return true;
                }
                if(total<0 || total>x+y){
                    continue;
                }
                if(!visited.contains(total)){
                    visited.add(total);
                    q.add(total);
                }
            }
        }
        return false;
    }
}


IF WE HAVE TO PRINT STEPS..........

class Solution {
    public int minSteps(int m, int n, int d) {
        if (d > m && d > n || d > m + n) return -1;

        Set<String> visited = new HashSet<>();
        Queue<int[]> q = new LinkedList<>();

        q.add(new int[]{0, 0});
        visited.add("0,0");
        int steps = 0;

        while (!q.isEmpty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                int[] curr = q.poll();
                int a = curr[0], b = curr[1];

                // Check goal condition
                if (a == d || b == d)
                    return steps;

                List<int[]> nextStates = getNextStates(a, b, m, n);

                for (int[] state : nextStates) {
                    String key = state[0] + "," + state[1];
                    if (!visited.contains(key)) {
                        visited.add(key);
                        q.add(state);
                    }
                }
            }
            steps++;
        }

        return -1;
    }

    private List<int[]> getNextStates(int a, int b, int m, int n) {
        List<int[]> states = new ArrayList<>();

        // Fill Jug1 or Jug2
        states.add(new int[]{m, b});
        states.add(new int[]{a, n});

        // Empty Jug1 or Jug2
        states.add(new int[]{0, b});
        states.add(new int[]{a, 0});

        // Pour Jug1 -> Jug2
        int pourToB = Math.min(a, n - b);
        states.add(new int[]{a - pourToB, b + pourToB});

        // Pour Jug2 -> Jug1
        int pourToA = Math.min(b, m - a);
        states.add(new int[]{a + pourToA, b - pourToA});

        return states;
    }
}






