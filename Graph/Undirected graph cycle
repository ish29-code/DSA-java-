Input: V = 4, E = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 3]]
Output: true
Explanation: 
 
1 -> 2 -> 0 -> 1 is a cycle.

class Solution {
    public Map<Integer,Set<Integer>> bgraph(int edges[][],int size){
        Map<Integer,Set<Integer>> graph = new HashMap<>();
        for(int i=0;i<size;i++){
            graph.put(i,new HashSet<>());
        }
        for(int edge[] : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return graph;
    }
    public boolean bfs(Map<Integer,Set<Integer>>graph,int start,int V){
        boolean visited[] = new boolean[V];
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{start,-1});
        visited[start] = true;
        
        while(!q.isEmpty()){
            int node[] = q.remove();
            int current = node[0],parent=node[1];
            
            
            for(int neighbour : graph.getOrDefault(current,new HashSet<>())){
                if(!visited[neighbour]){
                    visited[neighbour]=true;
                    q.add(new int[]{neighbour,current});
                }
                else if(neighbour!=parent){
                        return true;
                }
            }
        }
        return false;
    }
    public boolean isCycle(int V, int[][] edges) {
        // Code here
        Map<Integer,Set<Integer>> graph = bgraph(edges,V);
        boolean[] visited = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (bfs(graph, i, V)) {
                    return true;
                }
            }
        }
        return false;

    }
}
