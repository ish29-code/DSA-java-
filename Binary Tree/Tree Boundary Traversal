Input: root = [1, 2, 3, 4, 5, 6, 7, N, N, 8, 9, N, N, N, N]
Output: [1, 2, 4, 8, 9, 6, 7, 3]


class Solution {
    void getLeftBoundary(Node node, ArrayList<Integer> result) {
        while (node != null) {
            if (node.left != null || node.right != null) result.add(node.data);
            node = (node.left != null) ? node.left : node.right;
        }
    }

    void getLeaves(Node node, ArrayList<Integer> result) {
        if (node == null) return;
        if (node.left == null && node.right == null) {
            result.add(node.data);
            return;
        }
        getLeaves(node.left, result);
        getLeaves(node.right, result);
    }

    void getRightBoundary(Node node, ArrayList<Integer> result) {
        ArrayList<Integer> temp = new ArrayList<>();
        while (node != null) {
            if (node.left != null || node.right != null) temp.add(node.data);
            node = (node.right != null) ? node.right : node.left;
        }
        Collections.reverse(temp); 
        result.addAll(temp);
    }

    ArrayList<Integer> boundaryTraversal(Node node) {
        ArrayList<Integer> result = new ArrayList<>();
        if (node == null) return result;

        result.add(node.data); 
        
        getLeftBoundary(node.left, result);
        getLeaves(node.left, result);
        getLeaves(node.right, result);
        getRightBoundary(node.right, result);

        return result;
    }

   
}
