Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.


class Solution
{
    class pair{
        Node node;
        int hd;
        
        pair(Node node,int hd){
            this.node = node;
            this.hd = hd;
        }
    }
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        ArrayList <Integer> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        
        TreeMap<Integer,Integer> map = new TreeMap<>();
        Queue<pair> q = new LinkedList<>();
        q.add(new pair(root,0));
        
        while(!q.isEmpty()){
            pair currpair = q.remove();
            Node currnode = currpair.node;
            int hd = currpair.hd;
            
            map.put(hd,currnode.data);
            
            if(currnode.left!=null){
                q.add(new pair(currnode.left,hd-1));
            }
            if(currnode.right!=null){
                q.add(new pair(currnode.right,hd+1));
            }
        }
        for(int value : map.values()){
            result.add(value);
        }
        return result;
    }
}
