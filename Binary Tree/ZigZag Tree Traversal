Input:
        1
      /   \
     2      3
    / \    /  \
   4   5  6    7
Output: [1, 3, 2, 4, 5, 6, 7]
Explanation:
For level 1 going left to right, we get traversal as {1}.
For level 2 going right to left, we get traversal as {3,2}.
For level 3 going left to right, we get traversal as {4,5,6,7}.
Merging all this traversals in single array we get {1,3,2,4,5,6,7}.



class GFG
{
    //Function to store the zig zag order traversal of tree in a list.
	ArrayList<Integer> zigZagTraversal(Node root)
	{
	    //Add your code here.
	    Queue<Node> q = new LinkedList<>();
	    ArrayList<Integer> result = new ArrayList<>();
	    
	    if(root==null){
	        return result;
	    }
	    
	    q.add(root);
	    boolean lefttoRight = true;
	    
	    while(!q.isEmpty()){
	        int size = q.size();
	        ArrayList<Integer> li = new ArrayList<>();
	        
	        for(int i=0;i<size;i++){
	            Node curr = q.remove();
	            li.add(curr.data);
	            
	            if(curr.left!=null){
	                q.add(curr.left);
	            }
	            if(curr.right!=null){
	                q.add(curr.right);
	            }
	        }
	        
	        if(!lefttoRight){
	           Collections.reverse(li);
	        }
	        
	        result.addAll(li);
	        lefttoRight = !lefttoRight;//toogle
	    }
	    return result;
	}
}
