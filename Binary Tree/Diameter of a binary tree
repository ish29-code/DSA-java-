Input: root[] = [1, 2, 3]

Output: 2
Explanation: The longest path has 2 edges (node 2 -> node 1 -> node 3).



class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        }

        int left = maxheight(root.left);
        int right = maxheight(root.right);
        int dia = left+right;
        int sub = Math.max(diameterOfBinaryTree(root.left),diameterOfBinaryTree(root.right));

        return Math.max(dia,sub);
    }

    private int maxheight(TreeNode root){
        if(root==null){
            return 0;
        }

        return 1+Math.max(maxheight(root.left),maxheight(root.right));
    }
}

