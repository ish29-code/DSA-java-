class Solution {
    public int dupSub(Node root) {
        HashMap<String, Integer> subtreeMap = new HashMap<>();
        return findDuplicateSubtrees(root, subtreeMap) ? 1 : 0;
    }

    private boolean findDuplicateSubtrees(Node root, HashMap<String, Integer> subtreeMap) {
        if (root == null) return false;

        String subtree = serialize(root);

        // Track occurrences in the hashmap
        subtreeMap.put(subtree, subtreeMap.getOrDefault(subtree, 0) + 1);

        // Ensure duplicate subtree has **at least two nodes** before marking
        if (subtreeMap.get(subtree) == 2 && subtree.contains("|")) return true;

        return findDuplicateSubtrees(root.left, subtreeMap) || findDuplicateSubtrees(root.right, subtreeMap);
    }

    private String serialize(Node root) {
        if (root == null) return "#"; // Represent null nodes clearly
        if (root.left == null && root.right == null) return Integer.toString(root.data); // Skip leaf nodes

        return "(" + serialize(root.left) + "|" + root.data + "|" + serialize(root.right) + ")";
    }
}


class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> result = new ArrayList<>();
        Map<String,Integer> map = new HashMap<>();
        finddupli(root,map,result);
        return result;
    }
    public String finddupli(TreeNode root, Map<String,Integer> map,List<TreeNode> result){
        if(root==null){
            return "#";
        }

        String subtree = "(" + finddupli(root.left,map,result)+","+root.val+","+finddupli(root.right,map,result)+")";

        map.put(subtree,map.getOrDefault(subtree,0)+1);

        if(map.get(subtree)==2){
            result.add(root);
        }

        return subtree;
    }
}
